name: cd

on:
  release:
    types:
      - "published"

env:
  APPLICATION_NAME: hello-django
  
jobs:
  test:
    runs-on: ubuntu-latest
    container:
      image: python:3-bullseye
    services:
      db:
        image: postgres:13-bullseye
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: python -m pip install --upgrade pip && python -m pip install -r requirements.txt

      - name: Django check
        run: python manage.py check

      - name: Django migrate
        run: python manage.py migrate
        env:
          DATABASE_HOST: db
          DATABASE_PORT: 5432
          DATABASE_NAME: postgres
          DATABASE_USERNAME: postgres
          DATABASE_PASSWORD: postgres

      - name: Django test (with coverage)
        run: python -m coverage run --include 'main/*' manage.py test
        env:
          DATABASE_HOST: db
          DATABASE_PORT: 5432
          DATABASE_NAME: postgres
          DATABASE_USERNAME: postgres
          DATABASE_PASSWORD: postgres

      - name: Coverage report
        run: python -m coverage report --show-missing --fail-under=100

  build:
    needs: test
    runs-on: ubuntu-latest
    container:
      image: docker:20
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: ECR login
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Docker build and push to ECR
        id: docker-build
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPOSITORY: ${{ env.APPLICATION_NAME }}
          IMAGE_TAG: ${{ github.ref_name }}

  provision:
    needs: build
    runs-on: ubuntu-latest
    container:
      image: hashicorp/terraform:1.2.4
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform init
        run: terraform init -backend-config="key=${{ env.APPLICATION_NAME }}/key"

      - name: Terraform plan
        run: |
          terraform plan \
          -var "application_version=${{ github.ref_name }}" \
          -var "application_debug_enabled=no" \
          -var "application_secret_key=${{ secrets.APPLICATION_SECRET_KEY }}" \
          -var "database_password=${{ secrets.DATABASE_PASSWORD }}" \
          -out tfplan

      - name: Terraform apply
        run: terraform apply -auto-approve tfplan

      - name: Terraform output
        id: terraform-output
        run: echo "::set-output name=database_endpoint::$(terraform output -raw database_endpoint)"

    outputs:
      database_endpoint: ${{ steps.terraform-output.outputs.database_endpoint }}

  migrate:
    needs: provision
    runs-on: ubuntu-latest
    container:
      image: python:3-bullseye
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: python -m pip install --upgrade pip && python -m pip install -r requirements.txt

      - name: Django check
        run: python manage.py check

      - name: Django migrate
        run: python manage.py migrate
        env:
          DATABASE_HOST: ${{ needs.provision.outputs.database_endpoint }}
          DATABASE_PORT: 5432
          DATABASE_NAME: postgres
          DATABASE_USERNAME: postgres
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
